import {CodeData, ValueTransformation, VariableCodingData, VariableInfo} from "@response-scheme";export class Coding implements VariableCodingData {  status: 'INVALID_SOURCE' | 'EMPTY' | 'HAS_CODES';  id: string;  sourceType: "BASE" | "DERIVE_CONCAT" | "DERIVE_SUM";  codes: CodeData[];  deriveSourceType: "VALUE" | "CODE" | "SCORE";  deriveSources: string[];  label: string;  manualInstruction: string;  valueTransformations: ValueTransformation[];  constructor(variableCodingData: Partial<VariableCodingData>) {    this.id = variableCodingData.id || '???';    this.sourceType = variableCodingData.sourceType || 'BASE';    this.codes = variableCodingData.codes || [];    this.status = this.codes.length > 0 ? 'HAS_CODES' : 'EMPTY';    this.deriveSourceType = variableCodingData.deriveSourceType || 'VALUE';    this.deriveSources = variableCodingData.deriveSources || [];    this.label = variableCodingData.label || '';    this.manualInstruction = variableCodingData.manualInstruction || '';    this.valueTransformations = variableCodingData.valueTransformations || [];  }  validate() {    this.status = (this.codes.length > 0 || this.manualInstruction.length > 0) ? 'HAS_CODES' : 'EMPTY';  }  static fromVariableInfo(varInfo: VariableInfo): Coding {    return new Coding({      id: varInfo.id,      label: varInfo.id,      sourceType: 'BASE',      deriveSources: [],      deriveSourceType: 'CODE',      valueTransformations: [],      manualInstruction: '',      codes: []    })  }}