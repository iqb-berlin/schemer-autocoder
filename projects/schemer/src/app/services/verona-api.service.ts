import { Injectable } from '@angular/core';import { fromEvent, Observable, Subject } from 'rxjs';import { UnitCodingScheme } from '../../../../response-scheme/src/lib/classes/coding-scheme';@Injectable({  providedIn: 'root'})export class VeronaAPIService {  sessionID: string = '';  private _vosStartCommand = new Subject<VosStartCommand>(); // TODO proper interfaces  private _vosGetSchemeRequest = new Subject<VosGetSchemeRequest>();  private isStandalone = (): boolean => window === window.parent;  constructor() {    fromEvent(window, 'message')      .subscribe((event: Event): void => {        this.handleMessage((event as MessageEvent).data);      });  }  private handleMessage(messageData: VosGetSchemeRequest | VosStartCommand): void {    switch (messageData.type) {      case 'vosStartCommand':        this.sessionID = messageData.sessionId;        this._vosStartCommand.next(messageData as VosStartCommand);        break;      case 'vosGetDefinitionRequest':        this._vosGetSchemeRequest.next(messageData);        break;      default:        console.warn(`schemer: got message of unknown type ${messageData}`);    }  }  private send(message: Record<string, string>): void {    // prevent posts in local (dev) mode    if (!this.isStandalone()) {      window.parent.postMessage(message, '*');    } else {      // console.log(`player: ${message.type}`);    }  }  sendVosReadyNotification(): void {    this.send({      type: 'vosReadyNotification',      apiVersion: '0.1.0',      metadata: '' // todo implement json-ld    });  }  sendVosSchemeChangedNotification(scheme: UnitCodingScheme): void {    this.send({      type: 'vosSchemeChangedNotification',      sessionId: this.sessionID,      timeStamp: String(Date.now()),      codingScheme: JSON.stringify(scheme),      codingSchemeType: 'iqb@1.0'    });  }  get vosStartCommand(): Observable<VosStartCommand> {    return this._vosStartCommand.asObservable();  }  get vosGetSchemeRequest(): Observable<VosGetSchemeRequest> {    return this._vosGetSchemeRequest.asObservable();  }}export interface VosStartCommand extends MessageEvent {  sessionId: string,  unitDefinition: string,  unitDefinitionType: string,  editorConfig: {    definitionReportPolicy: string  }}export interface VosGetSchemeRequest extends MessageEvent {  sessionId: string}