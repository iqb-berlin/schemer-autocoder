import { Injectable } from '@angular/core';import { CodingScheme, BasisVariableDef } from '@response-scheme';import { BehaviorSubject } from 'rxjs';@Injectable({  providedIn: 'root'})export class MainDataService {  varList: BasisVariableDef[] = [{    'id': 'M2883a',    'type': 'string',    'format': '',    'multiple': false,    'nullable': false,    'values': []  }, {    'id': 'M2883b',    'type': 'string',    'format': '',    'multiple': false,    'nullable': false,    'values': []  }, {    'id': 'M2883c',    'type': 'boolean',    'format': '',    'multiple': false,    'nullable': false,    'values': []  }, {    'id': 'M2883d',    'type': 'number',    'format': '',    'multiple': false,    'nullable': false,    'values': []  }  ]    ;  codingSchemes: CodingScheme[] = [];  selectedScheme$ = new BehaviorSubject<CodingScheme | null>(null);  syncVariables() {    this.varList.forEach(varScheme => {      const codingScheme = this.getSchemeById(varScheme.id);      if (!codingScheme) {        this.codingSchemes.push(<CodingScheme>{          id: varScheme.id,          label: varScheme.id,          sourceType: 'BASE',          deriveSources: [],          deriveSourceType: 'CODE',          valueTransformations: [],          manualInstruction: '',          codes: []        });      }    });    this.codingSchemes.sort(function (a, b) {      const idA = a.id.toUpperCase();      const idB = b.id.toUpperCase();      if (idA < idB) return -1;      if (idA > idB) return 1;      return 0;    });  }  filteredCodingSchemes(codingSchemes: CodingScheme[], checkForBase: boolean): CodingScheme[] {    const returnCodingSchemes: CodingScheme[] = [];    codingSchemes.forEach(cS => {      if ((cS.sourceType === 'BASE' && checkForBase) || (cS.sourceType !== 'BASE' && !checkForBase))        returnCodingSchemes.push(cS);    });    return returnCodingSchemes;  }  allCodingSchemeIds(codingSchemes: CodingScheme[]): string[] {    const returnCodingSchemeIds: string[] = [];    codingSchemes.forEach(cS => {      returnCodingSchemeIds.push(cS.id);    });    return returnCodingSchemeIds;  }  getSchemeById(id: string): CodingScheme | null {    if (this.codingSchemes.length === 0) return null;    let variableScheme = null;    this.codingSchemes.forEach(codingScheme => {      if (codingScheme.id === id) {        variableScheme = codingScheme;      }    });    return variableScheme;  }}