import { EventEmitter, Injectable, Output } from '@angular/core';import { VariableCodingData, VariableInfo } from '@response-scheme';import { BehaviorSubject } from 'rxjs';@Injectable({  providedIn: 'root'})export class MainDataService {  @Output() codingSchemeChanged = new EventEmitter<VariableCodingData[]>();  invalidDataFormat = '';  varList: VariableInfo[] = [];  variableCodingData: VariableCodingData[] = [];  selectedCoding$ = new BehaviorSubject<VariableCodingData | null>(null);  syncVariables() {    this.variableCodingData = this.varList      .reduce((accumulator, current) => {        if (!this.getCodingById(current.id)) {          accumulator.push({            id: current.id,            label: current.id,            sourceType: 'BASE',            deriveSources: [],            deriveSourceType: 'CODE',            valueTransformations: [],            manualInstruction: '',            codes: []          });        }        return accumulator;      }, this.variableCodingData);    MainDataService.sortByID(this.variableCodingData);  }  addCoding(codingScheme: VariableCodingData): void {    this.variableCodingData.push(codingScheme);    MainDataService.sortByID(this.variableCodingData);    this.setCodingSchemesChanged();  }  setSortedVarList(variables: VariableInfo[]): void {    this.varList = MainDataService.sortByID(variables);  }  private static sortByID<T>( array: Array<T & { id: string }>): Array<T & { id: string }> {    return array.sort((a, b) => {      const idA = a.id.toUpperCase();      const idB = b.id.toUpperCase();      if (idA < idB) return -1;      if (idA > idB) return 1;      return 0;    });  }  setCodingSchemesChanged(): void {    this.codingSchemeChanged.emit(this.variableCodingData);  }  filteredCodings(codings: VariableCodingData[], checkForBase: boolean): VariableCodingData[] {    return codings      .filter(codingScheme => (codingScheme.sourceType === 'BASE' && checkForBase) ||        (codingScheme.sourceType !== 'BASE' && !checkForBase));  }  allCodings(codings: VariableCodingData[]): string[] {    return codings.map(coding => coding.id);  }  getCodingById(id: string): VariableCodingData | undefined {    return this.variableCodingData.find(coding => coding.id === id);  }}