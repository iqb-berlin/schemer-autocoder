import { EventEmitter, Injectable, Output } from '@angular/core';import { CodingScheme, BasisVariableDef } from '@response-scheme';import { BehaviorSubject } from 'rxjs';@Injectable({  providedIn: 'root'})export class MainDataService {  @Output() codingSchemesChanged = new EventEmitter<CodingScheme[]>();  varList: BasisVariableDef[] = [];  codingSchemes: CodingScheme[] = [];  selectedScheme$ = new BehaviorSubject<CodingScheme | null>(null);  syncVariables() {    this.codingSchemes = this.varList      .reduce((accumulator, current) => {        if (!this.getSchemeById(current.id)) {          accumulator.push({            id: current.id,            label: current.id,            sourceType: 'BASE',            deriveSources: [],            deriveSourceType: 'CODE',            valueTransformations: [],            manualInstruction: '',            codes: []          });        }        return accumulator;      }, this.codingSchemes);    MainDataService.sortByID(this.codingSchemes);  }  addCodingScheme(codingScheme: CodingScheme): void {    this.codingSchemes.push(codingScheme);    MainDataService.sortByID(this.codingSchemes);    this.setCodingSchemesChanged();  }  setSortedVarList(variables: BasisVariableDef[]): void {    this.varList = MainDataService.sortByID(variables);  }  private static sortByID<T>( array: Array<T & { id: string }>): Array<T & { id: string }> {    return array.sort((a, b) => {      const idA = a.id.toUpperCase();      const idB = b.id.toUpperCase();      if (idA < idB) return -1;      if (idA > idB) return 1;      return 0;    });  }  setCodingSchemesChanged(): void {    this.codingSchemesChanged.emit(this.codingSchemes);  }  filteredCodingSchemes(codingSchemes: CodingScheme[], checkForBase: boolean): CodingScheme[] {    return codingSchemes      .filter(codingScheme => (codingScheme.sourceType === 'BASE' && checkForBase) ||        (codingScheme.sourceType !== 'BASE' && !checkForBase));  }  allCodingSchemeIds(codingSchemes: CodingScheme[]): string[] {    return codingSchemes.map(codingScheme => codingScheme.id);  }  getSchemeById(id: string): CodingScheme | undefined {    return this.codingSchemes.find(codingScheme => codingScheme.id === id);  }}