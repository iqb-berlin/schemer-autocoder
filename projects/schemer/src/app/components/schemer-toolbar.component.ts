import { Component, EventEmitter, Output } from '@angular/core';import { FileService } from '../services/file.service';import { MainDataService } from '../services/main-data.service';import { VosStartCommand } from '../services/verona-api.service';@Component({  selector: 'schemer-toolbar',  template: `    <mat-toolbar fxLayout="row" fxLayoutAlign="space-between center">      <div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="10px">        <button mat-raised-button (click)="loadVariables()">          {{'toolbar.loadVarList' | translate}}          <mat-icon>file_upload</mat-icon>        </button>        <button mat-raised-button (click)="loadCodingScheme()">          {{'toolbar.loadCodingScheme' | translate}}          <mat-icon>file_upload</mat-icon>        </button>        <button mat-raised-button (click)="saveCodingScheme()">          {{'toolbar.saveCodingScheme' | translate}}          <mat-icon>file_download</mat-icon>        </button>      </div>      <button mat-flat-button (click)="toggleDrawerClick.emit()">        Antwortschema pr√ºfen        <mat-icon>check</mat-icon>      </button>    </mat-toolbar>  `,  styles: [    '.mat-toolbar {background-color: #799}'  ]})export class SchemerToolbarComponent {  @Output() toggleDrawerClick = new EventEmitter();  constructor(    private fileService: FileService,    private mainDataService: MainDataService  ) { }  saveCodingScheme(): void {    FileService.saveToFile(JSON.stringify({      variables: this.mainDataService.varList,      codings: this.mainDataService.variableCodingData    }), 'coding-scheme.json');  }  async loadVariables(): Promise<void> {    const vosStartCommandPayload: VosStartCommand = {      type: 'vosStartCommand',      sessionId: 'dev',      codingScheme: '',      codingSchemeType: '',      variables: JSON.parse(await FileService.loadFile(['.json']))    };    this.postMessage(vosStartCommandPayload);  }  private postMessage = (message: VosStartCommand): void => {    window.postMessage(message, '*');  };  async loadCodingScheme(): Promise<void> {    const codingData = JSON.parse(await FileService.loadFile(['.json']));    const vosStartCommandPayload: VosStartCommand = {      type: 'vosStartCommand',      sessionId: 'dev',      codingScheme: JSON.stringify({        variableCodings: codingData.codings      }),      codingSchemeType: 'iqb@1.1',      variables: codingData.variables    };    this.postMessage(vosStartCommandPayload);  }}